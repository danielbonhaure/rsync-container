

##########################
## Set GLOBAL arguments ##
##########################

# Set user name and id
ARG USR_NAME="nonroot"
ARG USER_UID="1000"

# Set group name and id
ARG GRP_NAME="nonroot"
ARG USER_GID="1000"

# Set users passwords
ARG ROOT_PWD="root"
ARG USER_PWD=$USR_NAME



#################################################
## Stage 1: Install OS packages (create image) ##
#################################################

# Create image
FROM debian:stable-slim AS rsync_core_builder

# Set environment variables
ARG DEBIAN_FRONTEND=noninteractive

# Install OS packages
RUN apt-get -y -qq update && \
    apt-get -y -qq --no-install-recommends install \
        # to run rsync
        rsync \
        # to run ssh-keygen
        openssh-client \
        # to send public key to rsync destine
        sshpass && \
    rm -rf /var/lib/apt/lists/*



###########################################
## Stage 2: Install management packages  ##
###########################################

# Create image
FROM rsync_core_builder AS rsync_builder

# Set environment variables
ARG DEBIAN_FRONTEND=noninteractive

# Install OS packages
RUN apt-get -y -qq update && \
    apt-get -y -qq upgrade && \
    apt-get -y -qq --no-install-recommends install \
        # install Tini (https://github.com/krallin/tini#using-tini)
        tini \
        # to see process with pid 1
        htop \
        # to allow edit files
        vim \
        # to run process with cron
        cron && \
    rm -rf /var/lib/apt/lists/*

# Setup cron to allow it run as a non root user
RUN chmod u+s $(which cron)

# Add Tini (https://github.com/krallin/tini#using-tini)
ENTRYPOINT ["/usr/bin/tini", "-g", "--"]



###################################
## Stage 3: Create non-root user ##
###################################

# Create image
FROM rsync_builder AS rsync_nonroot

# Set environment variables
ARG DEBIAN_FRONTEND=noninteractive

# Renew ARGs
ARG USR_NAME
ARG USER_UID
ARG GRP_NAME
ARG USER_GID
ARG ROOT_PWD
ARG USER_PWD

# Install OS packages
RUN apt-get -y -qq update && \
    apt-get -y -qq upgrade && \
    apt-get -y -qq --no-install-recommends install \
        # to run sudo
        sudo && \
    rm -rf /var/lib/apt/lists/*

# Modify root password
RUN echo "root:$ROOT_PWD" | chpasswd

# Create a non-root user, so the container can run as non-root
# OBS: the UID and GID must be the same as the user that own the
# input and the output volumes, so there isn't perms problems!!
# Se recomienda crear usuarios en el contendor de esta manera,
# ver: https://nickjanetakis.com/blog/running-docker-containers-as-a-non-root-user-with-a-custom-uid-and-gid
# Se agregar --no-log-init para prevenir un problema de seguridad,
# ver: https://jtreminio.com/blog/running-docker-containers-as-current-host-user/
RUN groupadd --gid $USER_GID $GRP_NAME
RUN useradd --no-log-init --uid $USER_UID --gid $USER_GID --shell /bin/bash \
    --comment "Non-root User Account" --create-home $USR_NAME

# Modify the password of non-root user
RUN echo "$USR_NAME:$USER_PWD" | chpasswd

# Add non-root user to sudoers and to adm group
# The adm group was added to allow non-root user to see logs
RUN usermod -aG sudo $USR_NAME && \
    usermod -aG adm $USR_NAME

# To allow sudo without password
# RUN echo "$USR_NAME ALL=(ALL) NOPASSWD: ALL" > /etc/sudoers.d/$USR_NAME && \
#     chmod 0440 /etc/sudoers.d/$USR_NAME



####################################
## Stage 4: Install and setup APP ##
####################################

# Create image
FROM rsync_nonroot AS rsync_final

# Set environment variables
ARG DEBIAN_FRONTEND=noninteractive

# Renew ARGs
ARG USR_NAME
ARG GRP_NAME

# Install OS packages
RUN apt-get -y -qq update && \
    apt-get -y -qq upgrade && \
    apt-get -y -qq --no-install-recommends install \
        # to use envsubst
        gettext-base && \
    rm -rf /var/lib/apt/lists/*

# Conf passwordless ssh:
USER $USR_NAME
# Generate public and private key
RUN mkdir -p /home/${USR_NAME}/.ssh && \
    ssh-keygen -b 2048 -t rsa -f /home/${USR_NAME}/.ssh/id_rsa -q -N ""
# Return to root user
USER root

# Set rsync command aliases
ARG RSYNC="rsync -e 'ssh -i /home/${USR_NAME}/.ssh/id_rsa' -iPavhz --chown=nobody:nogroup"
ARG SRC_DEST_STR="\${SRC_FILES} \${SSHUSER}@\${SSHHOST}:\${DEST_FOLDER}"
RUN echo "alias rs=\"${RSYNC}\"" >> /home/${USR_NAME}/.bash_aliases
RUN echo "alias rsSRCtoDEST=\"${RSYNC} ${SRC_DEST_STR}\"" >> /home/${USR_NAME}/.bash_aliases

# Create CRON config file
RUN printf "\n\
SHELL=/bin/bash \n\
# Setup cron to run rsync \n\
\${CRON_TIME_STR} ${RSYNC} ${SRC_DEST_STR} >> /proc/1/fd/1 2>> /proc/1/fd/1\n\
\n" > /tmp/crontab.txt
RUN chmod a+rw /tmp/crontab.txt

# Change CRON config file owner
RUN chown $USR_NAME:$GRP_NAME /tmp/crontab.txt

# Set environment variables needed
ENV SSHUSER=
ENV SSHHOST=
ENV SSHPASS=
ENV SRC_FILES="/data/{folder1/*.html,folder2/*.html}"
ENV DEST_FOLDER="/tmp"
ENV CRON_TIME_STR="0 3 * * *"

# Create startup/login script. This script should replace
# the environment variables defined above.
RUN printf "#!/bin/bash \n\
set -e \n\
# Substitute environment variables \n\
envsubst < /tmp/crontab.txt | tee /tmp/crontab.txt >/dev/null \n\
# Config crontab \n\
cat /tmp/crontab.txt | crontab - \n\
# Config passwordless ssh!! \n\
# Copy key to destination server \n\
sshpass -e ssh-copy-id -i /home/${USR_NAME}/.ssh/id_rsa -o StrictHostKeyChecking=no -f \${SSHUSER}@\${SSHHOST} \n\
# Unset environment variable SSHPASS \n\
unset SSHPASS \n\
# To run CMD after the entrypoint \n\
# See: https://stackoverflow.com/q/39082768 \n\
# See: https://stackoverflow.com/a/5163260 \n\
# OBS: exec $@ fails with double quotes \n\
exec \$@ \n\
\n" > /entrypoint.sh
RUN chmod a+x /entrypoint.sh



################################
## Stage 5: Setup final image ##
################################

# Import final image
FROM rsync_final

# Load global USER args
ARG USR_NAME

# Add Tini (https://github.com/krallin/tini#using-tini)
ENTRYPOINT [ "/usr/bin/tini", "-g", "--", "/entrypoint.sh" ]

# Run your program under Tini (https://github.com/krallin/tini#using-tini)
CMD [ "cron", "-fL", "15" ]
# or docker run your-image /your/program ...

# Access non-root user directory
WORKDIR /home/$USR_NAME

# Switch back to non-root user to avoid accidental container runs as root
USER $USR_NAME



# BUILD IMAGE
#
# DOCKER_BUILDKIT=1 \
# docker build --force-rm \
# --tag sync-pronos:latest \
# --file Dockerfile.nonroot .

# RUN WITH CRON
#
# docker run --name sync-pronos \
# --env SSHUSER=<user-of-rsync-dest> \
# --env SSHHOST=<host-of-rsync-dest> \
# --env SSHPASS=<pass-of-rsync-dest> \
# --env SRC_FILES="<path-to-src-files>" \
# --env DEST_FOLDER="<path-to-dest-folder>" \
# --volume <path-to-src-files-folder>:<path-to-src-files-folder> \
# --detach sync-pronos:latest



# VIEW RAM USED BY RUNNING CONTAINERS
# docker stats --format "table {{.ID}}\t{{.Name}}\t{{.CPUPerc}}\t{{.PIDs}}\t{{.MemUsage}}" --no-stream

# SEE LOGS (WITH COLORS) OF CONTAINER RUNNING IN THE BACKGROUND
# docker logs --follow ereg 2>&1 | ccze -m ansi
